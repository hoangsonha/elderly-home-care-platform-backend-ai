name: Deploy to VPS

on:
  push:
    branches:
      - main      # Deploy khi push vào main branch
      - master    # Hoặc master branch
  workflow_dispatch:  # Cho phép chạy manual từ GitHub UI

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to VPS via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT || 22 }}
          debug: true
          script_stop: true
          script: |
            set -e  # Exit on error
            
            echo ""
            echo "╔══════════════════════════════════════════════════════════════╗"
            echo "║           🚀 Starting Deployment to VPS                      ║"
            echo "╚══════════════════════════════════════════════════════════════╝"
            echo ""
            
            # Detect docker-compose command (v1 or v2)
            echo "🔍 [STEP 1/8] Detecting Docker Compose version..."
            if command -v docker-compose &> /dev/null; then
              DOCKER_COMPOSE="docker-compose"
            elif docker compose version &> /dev/null; then
              DOCKER_COMPOSE="docker compose"
            else
              echo "❌ Error: docker-compose not found!"
              exit 1
            fi
            echo "✅ Using: $DOCKER_COMPOSE"
            echo ""
            
            # Navigate to project directory
            echo "📂 [STEP 2/8] Navigating to project directory..."
            cd ~/elderly-home-care-platform-backend-ai || { echo "❌ Directory not found!"; exit 1; }
            echo "✅ Current directory: $(pwd)"
            echo ""
            
            # Determine current branch (if exists) or use default
            CURRENT_BRANCH=$(git branch --show-current 2>/dev/null || echo "main")
            echo "🌿 Git Branch: $CURRENT_BRANCH"
            echo ""
            
            # Pull latest code from GitHub
            echo "⬇️  [STEP 3/8] Pulling latest code from GitHub..."
            git fetch origin
            if git pull origin $CURRENT_BRANCH || git pull origin main || git pull origin master; then
              echo "✅ Code updated successfully"
            else
              echo "⚠️  Git pull failed, continuing with existing code..."
            fi
            echo ""
            
            # Backup database before deployment
            echo "💾 [STEP 4/8] Creating Database Backup..."
            BACKUP_DIR="$PWD/backups"
            mkdir -p "$BACKUP_DIR"
            echo "📁 Backup directory: $BACKUP_DIR"
            
            # Check if database container is running
            if docker ps | grep -q elderly_db; then
              BACKUP_FILE="$BACKUP_DIR/db_backup_$(date +%Y%m%d_%H%M%S).sql"
              echo "🔄 Creating backup: $(basename $BACKUP_FILE)"
              
              # Create backup using pg_dump
              if docker exec elderly_db pg_dump -U postgres elderly_platform > "$BACKUP_FILE" 2>/dev/null; then
                if [ -f "$BACKUP_FILE" ] && [ -s "$BACKUP_FILE" ]; then
                  # Compress backup to save space
                  if gzip -f "$BACKUP_FILE" 2>/dev/null; then
                    BACKUP_FILE="${BACKUP_FILE}.gz"
                    BACKUP_SIZE=$(ls -lh "$BACKUP_FILE" | awk '{print $5}')
                    echo "✅ Backup created successfully!"
                    echo "   📦 File: $(basename $BACKUP_FILE)"
                    echo "   📊 Size: $BACKUP_SIZE"
                    
                    # Keep only last 10 backups (cleanup old backups)
                    echo "🧹 Cleaning up old backups (keeping last 10)..."
                    (set +e; \
                     cd "$BACKUP_DIR" 2>/dev/null || exit 0; \
                     BACKUP_FILES=($(ls -t db_backup_*.sql.gz 2>/dev/null || true)); \
                     if [ ${#BACKUP_FILES[@]} -gt 10 ]; then \
                       REMOVE_FILES=("${BACKUP_FILES[@]:10}"); \
                       echo "   🗑️  Removing ${#REMOVE_FILES[@]} old backup(s)..."; \
                       rm -f "${REMOVE_FILES[@]}" 2>/dev/null || true; \
                       echo "   ✅ Old backups cleaned up"; \
                     else \
                       echo "   ℹ️  No old backups to remove (only ${#BACKUP_FILES[@]} backup(s))"; \
                     fi)
                  else
                    echo "⚠️  Warning: Could not compress backup"
                  fi
                else
                  echo "⚠️  Warning: Backup file is empty"
                fi
              else
                echo "⚠️  Warning: Could not create backup (database might not be accessible)"
              fi
            else
              echo "⚠️  Database container is not running, skipping backup"
            fi
            echo ""
            
            # Stop existing containers (gracefully, don't remove volumes)
            echo "🛑 [STEP 5/8] Stopping existing containers..."
            echo "   ℹ️  Note: Volumes will be preserved (database data safe)"
            if $DOCKER_COMPOSE down; then
              echo "✅ Containers stopped successfully"
            else
              echo "ℹ️  No containers were running"
            fi
            echo ""
            
            # Rebuild and start containers
            echo "🔨 [STEP 6/8] Building containers..."
            echo "   ℹ️  Building only changed services (using cache when possible)..."
            echo "   ⏳ This may take several minutes if dependencies changed..."
            # Build without --no-cache to use Docker layer cache
            # This way, if only code changed (not requirements), it will build faster
            # If requirements.txt changed, Docker will rebuild from that layer
            if $DOCKER_COMPOSE build; then
              echo "✅ Build completed successfully"
            else
              echo "❌ Build failed!"
              exit 1
            fi
            echo ""
            
            echo "🚀 [STEP 7/8] Starting containers..."
            if $DOCKER_COMPOSE up -d; then
              echo "✅ Containers started successfully"
            else
              echo "❌ Start failed!"
              exit 1
            fi
            echo ""
            
            # Wait for services to be ready
            echo "⏳ Waiting for services to be ready (15 seconds)..."
            sleep 15
            echo "✅ Wait completed"
            echo ""
            
            # Check container status
            echo "📊 [STEP 8/8] Checking deployment status..."
            echo ""
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            echo "📦 CONTAINER STATUS"
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            $DOCKER_COMPOSE ps
            echo ""
            
            # Check if all containers are running
            set +e  # Temporarily disable exit on error
            EXIT_COUNT=$($DOCKER_COMPOSE ps 2>/dev/null | grep -c "Exit" 2>/dev/null || echo "0")
            EXIT_COUNT=$(echo "$EXIT_COUNT" | tr -d '[:space:]' | head -1)
            # Validate that it's a number
            if ! [[ "$EXIT_COUNT" =~ ^[0-9]+$ ]]; then
              EXIT_COUNT=0
            fi
            set -e  # Re-enable exit on error
            
            if [ "$EXIT_COUNT" -gt 0 ]; then
              echo "⚠️  WARNING: Some containers failed to start!"
              $DOCKER_COMPOSE ps
              echo ""
            else
              echo "✅ All containers are running"
              echo ""
            fi
            
            # Show recent logs
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            echo "📝 RECENT LOGS (last 30 lines)"
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            $DOCKER_COMPOSE logs --tail=30
            echo ""
            
            # Health check (optional - test backend endpoint)
            echo "🏥 HEALTH CHECK"
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            sleep 5
            if curl -f http://localhost:8080/v3/api-docs > /dev/null 2>&1; then
              echo "✅ Backend is responding (HTTP 200)"
            else
              echo "⚠️  Backend health check failed (might still be starting up)"
            fi
            echo ""
            
            echo "╔══════════════════════════════════════════════════════════════╗"
            echo "║              ✅ DEPLOYMENT COMPLETED SUCCESSFULLY!            ║"
            echo "╚══════════════════════════════════════════════════════════════╝"
            echo ""
            echo "📌 Summary:"
            echo "   • Database data preserved in Docker volume"
            echo "   • All containers rebuilt and restarted"
            echo "   • Services should be accessible shortly"
            echo ""
